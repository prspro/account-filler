{"version":3,"file":"static/js/787.b3c1e5c4.chunk.js","mappings":"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","sources":["hooks/useCopy.ts","hooks/useManipulateData.ts","components/Field/useField.ts","components/Field/Field.tsx","components/FieldList/useFieldList.ts","components/FieldList/FieldList.tsx","components/CustomButton/CustomButton.tsx","components/Fields/useFields.ts","components/Fields/Fields.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport copyToClipboard from \"copy-to-clipboard\";\r\n\r\ninterface IUseCopy {\r\n  isCopied: boolean;\r\n  handleCopy: () => void;\r\n}\r\n\r\nconst useCopy = (value: string): IUseCopy => {\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  const handleCopy = () => {\r\n    if (isCopied) return;\r\n    copyToClipboard(value);\r\n    setIsCopied(true);\r\n    setTimeout(() => {\r\n      setIsCopied(false);\r\n    }, 1e3);\r\n  };\r\n\r\n  return { isCopied, handleCopy };\r\n};\r\n\r\nexport default useCopy;\r\n","import { faker } from \"@faker-js/faker\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\nimport { updateFieldValue } from \"../store/slices/dataSlice\";\r\n\r\nconst chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nconst passwordLength = 32;\r\n\r\ninterface IUseDataFill {\r\n  refreshFucntionList: {\r\n    id: string;\r\n    generationFunction: () => string;\r\n  }[];\r\n  handleDownloadData: () => void;\r\n  handleRefreshAllData: () => void;\r\n}\r\n\r\nfunction useDataFill(): IUseDataFill {\r\n  const password = (): string => {\r\n    let pw = \"\";\r\n    for (var i = 0; i <= passwordLength; i++) {\r\n      const randomNumber = Math.floor(Math.random() * chars.length);\r\n      pw += chars.substring(randomNumber, randomNumber + 1);\r\n    }\r\n    return pw;\r\n  };\r\n\r\n  const login = (): string => {\r\n    return faker.word.adjective() + faker.word.noun();\r\n  };\r\n\r\n  const firstName = () => {\r\n    return faker.name.firstName();\r\n  };\r\n\r\n  const lastName = () => {\r\n    return faker.name.lastName();\r\n  };\r\n\r\n  const email = () => {\r\n    return faker.internet.email();\r\n  };\r\n\r\n  const secretQuestion = () => {\r\n    return `${faker.word.adjective()} ${faker.word.noun()}`;\r\n  };\r\n  const secretAnswer = () => {\r\n    return `${faker.word.adverb()} ${faker.word.adjective()} ${faker.word.noun()}`;\r\n  };\r\n\r\n  const dateOfBirth = () => {\r\n    const dateValue = faker.date.birthdate({ min: 22, max: 35, mode: \"age\" });\r\n    return `${\r\n      dateValue.getDate() < 10 ? \"0\" + dateValue.getDate() : dateValue.getDate()\r\n    }.${\r\n      dateValue.getMonth() + 1 < 10\r\n        ? \"0\" + (dateValue.getMonth() + 1)\r\n        : dateValue.getMonth() + 1\r\n    }.${dateValue.getFullYear()}`;\r\n  };\r\n\r\n  const refreshFucntionList = [\r\n    {\r\n      id: \"firstName\",\r\n      generationFunction: firstName,\r\n    },\r\n    {\r\n      id: \"lastName\",\r\n      generationFunction: lastName,\r\n    },\r\n    {\r\n      id: \"dateOfBirth\",\r\n      generationFunction: dateOfBirth,\r\n    },\r\n    {\r\n      id: \"login\",\r\n      generationFunction: login,\r\n    },\r\n    {\r\n      id: \"password\",\r\n      generationFunction: password,\r\n    },\r\n    {\r\n      id: \"email\",\r\n      generationFunction: email,\r\n    },\r\n    {\r\n      id: \"secretQuestion\",\r\n      generationFunction: secretQuestion,\r\n    },\r\n    {\r\n      id: \"secretAnswer\",\r\n      generationFunction: secretAnswer,\r\n    },\r\n  ];\r\n\r\n  const stateData = useSelector((state: RootState) => state.data.fieldList);\r\n\r\n  const printStateData = () => {\r\n    const shownData = stateData.filter((entry) => entry.isShown);\r\n\r\n    const longestLabel = Math.max(\r\n      ...shownData.map((entry) => entry.label.length)\r\n    );\r\n    const modifiedStateData = shownData.map((entry) => {\r\n      const firstColumn =\r\n        entry.label + \":\" + \" \".repeat(longestLabel - entry.label.length);\r\n      return `${firstColumn} ${entry.value}\\r\\n`;\r\n    });\r\n    return modifiedStateData.join(\"\");\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDownloadData = () => {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([printStateData()], {\r\n      type: \"text/plain\",\r\n    });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = \"accountdata.txt\";\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    element.remove();\r\n  };\r\n\r\n  const handleRefreshAllData = () => {\r\n    stateData.forEach((entry) =>\r\n      dispatch(\r\n        updateFieldValue({\r\n          id: entry.id,\r\n          value:\r\n            refreshFucntionList\r\n              .find((item) => item.id === entry.id)\r\n              ?.generationFunction() || \"\",\r\n        })\r\n      )\r\n    );\r\n  };\r\n\r\n  return {\r\n    refreshFucntionList,\r\n    handleDownloadData,\r\n    handleRefreshAllData,\r\n  };\r\n}\r\n\r\nexport default useDataFill;\r\n","import { useEffect } from \"react\";\r\n///\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\nimport { updateFieldValue } from \"../../store/slices/dataSlice\";\r\n///\r\nimport useCopy from \"../../hooks/useCopy\";\r\nimport useManipulateData from \"../../hooks/useManipulateData\";\r\n\r\ninterface IUseFieldProps {\r\n  id: string;\r\n}\r\n\r\ninterface IUseField {\r\n  fieldValue: string;\r\n  handleRefresh: () => void;\r\n  isCopied: boolean;\r\n  handleCopy: () => void;\r\n}\r\n\r\nconst useField = ({ id }: IUseFieldProps): IUseField => {\r\n  const fieldValue =\r\n    useSelector((state: RootState) => state.data.fieldList).find(\r\n      (entry) => entry.id === id\r\n    )?.value || \"\";\r\n\r\n  const { isCopied, handleCopy } = useCopy(fieldValue);\r\n  const { refreshFucntionList } = useManipulateData();\r\n\r\n  const refreshFunction =\r\n    refreshFucntionList.find((entry) => entry.id === id)?.generationFunction ||\r\n    (() => \"error\");\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (fieldValue === \"\") {\r\n      dispatch(updateFieldValue({ id: id, value: refreshFunction() }));\r\n    }\r\n  }, []);\r\n\r\n  const handleRefresh = () => {\r\n    dispatch(updateFieldValue({ id: id, value: refreshFunction() }));\r\n  };\r\n\r\n  return { fieldValue, handleRefresh, isCopied, handleCopy };\r\n};\r\n\r\nexport default useField;\r\n","import useField from \"./useField\";\r\nimport SVGicon from \"../SVGicon/SVGicon\";\r\nimport \"./field.sass\";\r\nimport React, { FC } from \"react\";\r\n\r\ninterface IFieldProps {\r\n  label: string;\r\n  id: string;\r\n}\r\n\r\nconst Field: FC<IFieldProps> = ({ id, label }) => {\r\n  const { fieldValue, handleRefresh, handleCopy, isCopied } = useField({\r\n    id,\r\n  });\r\n\r\n  return (\r\n    <div className=\"field\">\r\n      <div className=\"field__row\">\r\n        <span className=\"field__name\">{label}:</span>\r\n        <button className=\"field__refresh\" onClick={handleRefresh}>\r\n          <SVGicon id={\"refresh\"} className={\"field__icon\"} />\r\n        </button>\r\n      </div>\r\n      <div className=\"field__row\">\r\n        <div className=\"field__value-wrap\">\r\n          <p className=\"field__value\">{isCopied ? \"Copied!\" : fieldValue}</p>\r\n        </div>\r\n        <button className=\"field__copy\" onClick={handleCopy}>\r\n          <SVGicon id={\"copy\"} className={\"field__icon\"} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\n\r\ninterface IUseFieldList {\r\n  dataList: {\r\n    id: string;\r\n    label: string;\r\n  }[];\r\n}\r\n\r\nfunction useFieldList(): IUseFieldList {\r\n  const dataList = useSelector((state: RootState) => state.data.fieldList)\r\n    .filter((entry) => entry.isShown)\r\n    .map((entry) => {\r\n      return { id: entry.id, label: entry.label };\r\n    });\r\n\r\n  return {\r\n    dataList,\r\n  };\r\n}\r\n\r\nexport default useFieldList;\r\n","import Field from \"../Field/Field\";\r\nimport useFieldList from \"./useFieldList\";\r\nimport { FC } from \"react\";\r\nimport \"./fieldList.sass\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface IFieldListProps {\r\n  className?: string;\r\n}\r\n\r\nconst FieldList: FC<IFieldListProps> = ({className}) => {\r\n  const { dataList } = useFieldList();\r\n\r\n  return (\r\n    <ul className={classNames(\"field-list\", className)} >\r\n      {dataList.map((fieldItem) => (\r\n        <li key={fieldItem.id} className=\"field-list__item\">\r\n          <Field label={fieldItem.label} id={fieldItem.id}></Field>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default FieldList;\r\n","import React, { FC } from \"react\";\r\nimport \"./customButton.sass\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface ICustomButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\r\n  children: JSX.Element | JSX.Element[];\r\n  className?: string;\r\n  onClick: () => void;\r\n}\r\n\r\nconst CustomButton: FC<ICustomButtonProps> = ({\r\n  className,\r\n  children,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <button className={classNames(\"custom-btn\", className)} onClick={onClick}>\r\n      <div className=\"custom-btn__inner-wrap\">{children}</div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CustomButton;\r\n","import useManipulateData from \"../../hooks/useManipulateData\";\r\n\r\ninterface IUseFields {\r\n  handleDownloadData: () => void;\r\n  handleRefreshAllData: () => void;\r\n}\r\n\r\nconst useFields = ():IUseFields => {\r\n  const { handleDownloadData, handleRefreshAllData } = useManipulateData();\r\n  return { handleDownloadData, handleRefreshAllData };\r\n};\r\n\r\nexport default useFields;\r\n","import { FC } from \"react\";\r\nimport FieldList from \"../FieldList/FieldList\";\r\nimport { LineList, LineItem } from \"../LineList/LineList\";\r\nimport CustomButton from \"../CustomButton/CustomButton\";\r\nimport SVGicon from \"../SVGicon/SVGicon\";\r\n///\r\nimport useFields from \"../Fields/useFields\";\r\nimport classNames from \"classnames\";\r\n///\r\nimport \"./fields.sass\";\r\n\r\ninterface IFieldsProps {\r\n  className?: string;\r\n}\r\n\r\nconst Fields: FC<IFieldsProps> = ({ className }) => {\r\n  const { handleDownloadData, handleRefreshAllData } = useFields();\r\n\r\n  return (\r\n    <div className={classNames(\"fields\", className)}>\r\n      <FieldList className=\"fields__list\" />\r\n      <LineList className=\"fields__btns\">\r\n        <LineItem>\r\n          <CustomButton onClick={handleDownloadData}>\r\n            <span>Download</span>\r\n            <SVGicon id={\"download\"} />\r\n          </CustomButton>\r\n        </LineItem>\r\n        <LineItem>\r\n          <CustomButton onClick={handleRefreshAllData}>\r\n            <span>Refresh all</span>\r\n            <SVGicon id={\"refresh\"} />\r\n          </CustomButton>\r\n        </LineItem>\r\n      </LineList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Fields;\r\n"],"names":["value","useState","isCopied","setIsCopied","handleCopy","copyToClipboard","setTimeout","chars","refreshFucntionList","id","generationFunction","faker","dateValue","min","max","mode","getDate","getMonth","getFullYear","pw","i","randomNumber","Math","floor","random","length","substring","stateData","useSelector","state","data","fieldList","printStateData","shownData","filter","entry","isShown","longestLabel","map","label","firstColumn","repeat","join","dispatch","useDispatch","handleDownloadData","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","remove","handleRefreshAllData","forEach","updateFieldValue","find","item","fieldValue","useCopy","refreshFunction","useManipulateData","useEffect","handleRefresh","useField","className","onClick","SVGicon","dataList","useFieldList","classNames","fieldItem","children","useFields","LineList"],"sourceRoot":""}